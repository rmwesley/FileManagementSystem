import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

public class App {
	private static final int NUM_THREADS = 5;

	public String getGreeting() {
		return "Hello World!";
	}

	// Create a method for searching a file in a file tree
	public static String searchFile(String fileName, String dirName) throws Exception {
		Path dir = Paths.get(dirName);

		List<Path> matches;
		try (Stream<Path> walk = Files.walk(dir).parallel()) {
			matches = walk
					.filter(Files::isReadable)
					.filter(Files::isRegularFile)
					.filter(p -> p.getFileName().toString().equalsIgnoreCase(fileName))
					.collect(Collectors.toList());
		}

		// If the file does not exist
		if (matches.size() == 0) {
			throw new FileNotFoundException("File does not exist in the tree");
		}

		if (matches.size() > 1) {
			throw new Exception("Several files with the same name exist");
		}
		return matches.get(0).toString();
	}

	public static String alternativeSearch(String fileName, String dirName) throws IOException {
		Path dir = Paths.get(dirName);

		List<Path> files = new ArrayList<>();
		try (Stream<Path> walk = Files.walk(dir)) {
			files = walk
					.parallel()
					.filter(Files::isReadable)
					.filter(Files::isRegularFile)
					.collect(Collectors.toList());
		}

		AtomicInteger visits = new AtomicInteger(0);
		ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);
		List<Callable<Path>> tasks = new ArrayList<>();
		//Path lastDir = Paths.get("");
		for (Path file : files) {
			//if (file.getParent().toString() != lastDir.toString()) visits.incrementAndGet();
			//lastDir = file.getParent();
			Callable<Path> task = () -> {
				if (file.getFileName().toString().equalsIgnoreCase(fileName)) {
					return file;
				} else {
					return null;
				}
			};
			tasks.add(task);
		}

		try {
			List<Future<Path>> results = executor.invokeAll(tasks);
			executor.shutdown();
			for (Future<Path> result : results) {
				Path match = result.get();
				if (match != null) {
					return match.toString() + ", visit count: " + visits;
				}
			}
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}

		throw new FileNotFoundException("File does not exist in the directory");
	}

	// Create a directory with the app
	public static void createDir(String dirPath) throws IOException {
		Path dir = Paths.get(dirPath);
		// If the directory already exists
		if (Files.exists(dir)) {
			throw new IOException("Directory already exists");
		}

		// Create the directory
		Path directory = Files.createDirectory(dir);

		// Output the directory
		System.out.println("Directory created: " + directory);
	}

	public static String getFileInfo(Path file){
		try {
			return file.getFileName()
			+ " : " 
			+ Files.size(file) 
			+ " bytes\n";
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	public static String list(String dirPath) throws IOException {
		Path dir = Path.of(dirPath);
		if (Files.exists(dir)) {
			return Files.walk(dir)
				.map(App::getFileInfo)
				.collect(Collectors.joining());
		}
		throw new FileNotFoundException("Directory does not exist");
	}

	public static void main(String[] args) throws Exception {
		if (args[0].equals("find")) {
			System.out.println(searchFile(args[1], args[2]));
			return;
		}
		if (args[0].equals("pfind")) {
			System.out.println(alternativeSearch(args[1], args[2]));
			return;
		}
		if (args[0].equals("ls")) {
			System.out.println(list(args[1]));
			return;
		}
		if (args[0].equals("mkdir")) {
			createDir(args[1]);
			return;
		}
	}
}